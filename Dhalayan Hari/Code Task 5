#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <RTClib.h>

// ---------- WiFi & MQTT Configuration ----------
const char* ssid = "HariS23";
const char* password = "12345678";
const char* mqtt_server = "test.mosquitto.org";
const int mqtt_port = 1883;
const char* mqtt_topic = "devices/RTC";
const char* mqtt_override_topic = "devices/RTC/Override";  // New override topic
const char* mqtt_control_topic = "devices/RTC/Control";  // FlowFuse control topic
const char* mqtt_status_topic = "devices/RTC/Status";  // HVAC status topic

// ---------- Pin Definitions ----------
#define BUTTON_PIN D3       // Manual override button
#define HVAC_PIN D4         // HVAC control relay
const int ledPin = LED_BUILTIN;  // Built-in LED for MQTT control

// ---------- Globals ----------
WiFiClient espClient;
PubSubClient client(espClient);
RTC_DS1307 rtc;
bool manualOverride = false;  // Manual override flag
bool hvacState = false;       // Track HVAC state

// ---------- WiFi Connection ----------
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println();
  Serial.println("WiFi connected!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

// ---------- MQTT Message Callback ----------
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message received [");
  Serial.print(topic);
  Serial.print("]: ");

  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.println(message);

  message.toLowerCase();

  if (message == "0" || message == "false") {
    digitalWrite(ledPin, LOW);
    Serial.println("LED OFF");
  } else if (message == "1" || message == "true") {
    digitalWrite(ledPin, HIGH);
    Serial.println("LED ON");
  } else if (String(topic) == mqtt_override_topic) {  // Handle override topic
    if (message == "true") {
      manualOverride = true;
      Serial.println("🔴 Manual override activated remotely!");
    } else if (message == "false") {
      manualOverride = false;
      Serial.println("⚙️ Manual override deactivated remotely.");
    }
  } else if (String(topic) == mqtt_control_topic) {  // Handle FlowFuse control topic
    if (message == "on") {
      digitalWrite(HVAC_PIN, HIGH);
      hvacState = true;
      client.publish(mqtt_status_topic, "ON");  // Publish HVAC state
      Serial.println("✅ HVAC turned ON via FlowFuse.");
    } else if (message == "off") {
      digitalWrite(HVAC_PIN, LOW);
      hvacState = false;
      client.publish(mqtt_status_topic, "OFF");  // Publish HVAC state
      Serial.println("❌ HVAC turned OFF via FlowFuse.");
    }
  }
}

// ---------- MQTT Reconnection ----------
void reconnect() {
  while (!client.connected()) {
    Serial.print("Trying to connect to MQTT broker...");
    if (client.connect("devices/001/clock/@timmer")) {
      Serial.println("Connected!");
      client.subscribe(mqtt_topic);
      client.subscribe(mqtt_override_topic);
      client.subscribe(mqtt_control_topic);
      Serial.println("Subscribed to:");
      Serial.println(mqtt_topic);
      Serial.println(mqtt_override_topic);
      Serial.println(mqtt_control_topic);
    } else {
      Serial.print("Connection failed. Error = ");
      Serial.print(client.state());
      Serial.println(". Trying again in 5 seconds...");
      delay(5000);
    }
  }
}

// ---------- Setup ----------
void setup() {
  Serial.begin(115200);
  Wire.begin();

  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  pinMode(HVAC_PIN, OUTPUT);
  digitalWrite(HVAC_PIN, LOW);

  pinMode(BUTTON_PIN, INPUT_PULLUP);

  if (!rtc.begin()) {
    Serial.println("⚠️ DS1307 not found! Check wiring.");
    while (1);
  }

  if (!rtc.isrunning()) {
    Serial.println("⚠️ RTC is NOT running! Setting time...");
    rtc.adjust(DateTime(__DATE__, __TIME__));
  }

  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

// ---------- Main Loop ----------
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  DateTime now = rtc.now();
  int hour = now.hour();

  Serial.print("Time: ");
  Serial.print(hour);
  Serial.println(":00");

  if (hour >= 20 || hour < 6) {
    Serial.println("🌙 Nighttime detected! Reducing HVAC activity.");
    digitalWrite(HVAC_PIN, LOW);
    if (hvacState) {
      client.publish(mqtt_status_topic, "OFF");
      hvacState = false;
    }
  } else {
    if (digitalRead(BUTTON_PIN) == LOW) {
      Serial.println("🔴 Manual override activated by button!");
      manualOverride = true;
    }

    if (manualOverride) {
      Serial.println("⚙️ Overriding automatic settings. HVAC ON.");
      digitalWrite(HVAC_PIN, HIGH);
      if (!hvacState) {
        client.publish(mqtt_status_topic, "ON");
        hvacState = true;
      }
    } else {
      Serial.println("☀️ Daytime, normal HVAC operation.");
      digitalWrite(HVAC_PIN, HIGH);
      if (!hvacState) {
        client.publish(mqtt_status_topic, "ON");
        hvacState = true;
      }
    }
  }
  delay(2000);
}
