pragma solidity ^0.8.10;

/**
 * @dev Contract module which provides basic access control mechanism,
 * where there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 */
contract Ownable {
    address private _owner;

    // Event that logs ownership transfers
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     * This is the constructor â€“ runs once when deployed.
     */
    constructor() {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
    }

    // Function to return the address of the current owner
    function owner() public view returns (address) {
        return _owner;
    }

    // Modifier to restrict function access to only the owner
    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    // Function to transfer ownership to a new address
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}
